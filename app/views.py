"""
Flask Documentation:     http://flask.pocoo.org/docs/
Jinja2 Documentation:    http://jinja.pocoo.org/2/documentation/
Werkzeug Documentation:  http://werkzeug.pocoo.org/documentation/
This file creates your application.
"""

from app import app, db, login_manager
from flask import render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_user, logout_user, current_user, login_required
from forms import LoginForm
from werkzeug.utils import secure_filename
from models import UserProfileNew, UserProfile
import os
import datetime


###
# Routing for your application.
###

@app.route('/')
def home():
    """Render website's home page."""
    return render_template('home.html')

@app.route('/about/')
def about():
    """Render the website's about page."""
    return render_template('about.html')

@app.route("/login", methods=["GET", "POST"])
def login():
    # If the user is already logged in then it will just return them to the 
    # secure page instead of logging them in again
    if (current_user.is_authenticated):
        return redirect(url_for('secure_page'))
    
    form = LoginForm()
    if request.method == "POST" and form.validate_on_submit():
        # change this to actually validate the entire form submission
        # and not just one field
        if form.username.data and form.password.data:
            # Get the username and password values from the form.
            username = form.username.data
            password = form.password.data
            
            # using your model, query database for a user based on the username
            # and password submitted
            # store the result of that query to a `user` variable so it can be
            # passed to the login_user() method.
            user = UserProfile.query.filter_by(username=username, password=password).first()
            # get user id, load into session
            if user is not None:
                login_user(user)
                flash('Logged in successfully.', 'success')
                next = request.args.get('next')
                return redirect(url_for('secure_page'))
            else:
                flash('Username or Password is incorrect.', 'danger')
                
    return render_template("login.html", form=form)

@app.route("/secure-page")
@login_required
def secure_page():
    return render_template('securepage.html', uploads=get_uploads())

@app.route('/profile', methods=["GET"])
def signup():
    """Render the website's signup page."""
    return render_template('signup.html')

@app.route('/profile', methods=["POST"])
def add_file():
    file_folder = app.config['UPLOAD_FOLDER']

    

    # if request.method == 'POST' and (request.form['fName'] and request.form['lName'] and 
    #     request.form['age'] and request.form['bio'] and request.form['file']):

    file = request.files['file']
    filename = secure_filename(file.filename)
    file.save(os.path.join(file_folder, filename))

    NewProfile = UserProfileNew(request.form['fName'], request.form['lName'],
                                request.form['userName'],request.form['age'], 
                                request.form['bio'], filename, request.form['gender'])
                                
    db.session.add(NewProfile)
    db.session.commit()

    # Have to perform a query lookup to find out the id number because its automatically 
    # generated by the database so we can redirect the user their newly created page 
    user = UserProfileNew.query.filter_by(username=request.form['userName']).first_or_404()

    flash('Profile created and successfully saved')
    return redirect(url_for('profile',userid=user.id))


@app.route('/profile/<userid>', methods=["GET"])
def profile(userid):
    """Render the website's profile page."""
    user = UserProfileNew.query.filter_by(id=userid).first_or_404()
    return render_template('profile.html', profile=user)

@app.route('/profiles', methods=['GET'])
def profiles():
    profiles = UserProfileNew.query.filter_by().all()
    return render_template('profiles.html', profiles=profiles)

@app.route('/profiles', methods=['POST'])
def profilesJSON():
    profile_list = []    
    profiles = UserProfileNew.query.filter_by().all()

    for profile in profiles:
        profile_list +=[{'username':profile.username, 'userID':profile.id}]
    return jsonify(users=profile_list)

@app.route('/profile/<userid>', methods=['POST'])
def profileIDJSON(userid):
    profile = UserProfileNew.query.filter_by(id=userid).first()
    if profile is not None:
        profile_list ={'userid':profile.id, 'username':profile.username, 
                        'image':profile.image, 'gender':profile.gender, 
                        'age':profile.age, 'profile_created_on':profile.datecreated
                        }
    else:
        profile_list = {}
    return jsonify(profile_list)    

def get_uploads():
    uploads = []
    for subdir, dirs, files in os.walk(app.config['UPLOAD_FOLDER']):
        for file in files:
            if not file.startswith('.'): #ignores hidden files on linux
                uploads.append(file)
    return uploads

@app.route('/filelisting', methods=['POST', 'GET'])
def test():
    if not session.get('logged_in'):
        abort(401)
        
    return render_template('uploads.html', uploads=get_uploads())

@app.template_filter('datetimeformat')
def datetimeformat(value, format='%d %b %Y'):
    return value.strftime(format)

@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash('Logged out successfully.', 'success')
    return redirect(url_for('home'))


# user_loader callback. This callback is used to reload the user object from
# the user ID stored in the session
@login_manager.user_loader
def load_user(id):
    return UserProfile.query.get(int(id))

###
# The functions below should be applicable to all Flask apps.
###

@app.route('/<file_name>.txt')
def send_text_file(file_name):
    """Send your static text file."""
    file_dot_text = file_name + '.txt'
    return app.send_static_file(file_dot_text)


@app.after_request
def add_header(response):
    """
    Add headers to both force latest IE rendering engine or Chrome Frame,
    and also to cache the rendered page for 10 minutes.
    """
    response.headers['X-UA-Compatible'] = 'IE=Edge,chrome=1'
    response.headers['Cache-Control'] = 'public, max-age=0'
    return response


@app.errorhandler(404)
def page_not_found(error):
    """Custom 404 page."""
    return render_template('404.html'), 404


if __name__ == '__main__':
    app.run(debug=True,host="0.0.0.0",port="8080")
